#!/usr/bin/env node

var program = require('commander');
var mustache = require('mustache');
var yaml = require('js-yaml');
var fs = require('fs');

var pkg = require('../package.json');
var version = pkg.version;

// Get Command Line Args
// program.template
// program.parts
// program.yaml
// program.args
program
    .version(version)
    .usage('[options] [<output filename> | - ]')
    .option('-t, --template [value]', 'Template filename')
    .option('-y, --yaml     [value]', 'YAML filename')
    .option('-p, --parts    [value]', 'Directory containing template parts (Optional)')
    .parse(process.argv);

// Output Filename
var output = program.args.shift();

//Help and Exit
function helpExit(message) {
    console.log('Error: ' + message);
    program.help();
    process.exit(1);
}

// Validate path is a file
// return true or false
function fileExists(path) {
    try { return fs.statSync(path).isFile(); }
    catch(err) { return false; }
}

// Validate path is a dir
// return true or false
function dirExists(path) {
    try { return fs.statSync(path).isDirectory(); }
    catch(err) { return false; }
}

// Validate YAML
// return true or false
function isYAML(path) {
    try { yaml.safeLoad(fs.readFileSync(path, 'utf8')); return true; }
    catch(err) { return false; }
}

// Render Template
function renderTemplate(t, y, p, o) {

    var template = t;
    var yamlfile = y;
    var partsdir = p;
    var outfile = o;

    var rendered;

    // Load template and pre-parse
    template = fs.readFileSync(t, 'utf8');
    mustache.parse(t);

    // Load yaml
    yamlfile = yaml.safeLoad(fs.readFileSync(y, 'utf8'));

    //check if --parts argument passed
    if (!partsdir) {
        // Render
        rendered = mustache.render(template,yamlfile);
    } else {
        // Create array of file in dir p
        var pl = fs.readdirSync(partsdir);

        // Create object for partials
        var po = {};

        // populate object po
        pl.forEach(function(element, index, array) {
            po[element.substring(0, element.search(/\./))] = fs.readFileSync(partsdir + '/' + element, 'utf8');
        });

        // Render
        rendered = mustache.render(template,yamlfile,po);
    }
    if(outfile == '-' || outfile == null) {
        console.log(rendered);
    } else {
        if(!fileExists(outfile)) {
            fs.writeFileSync(outfile,rendered)
            console.log('Completed successfully.');
        } else {
            helpExit('Could not write to output file! It either exists, or is invalid.');
        }

    }
}

// Check for required args and validate
if (!fileExists(program.template)) helpExit('Template not specified!');
if (program.parts != undefined && !dirExists(program.parts)) helpExit('Specified parts directory invalid!');
if (!fileExists(program.yaml) || !isYAML(program.yaml)) helpExit('YAML file not specified or invalid!');


// Render template
renderTemplate(program.template, program.yaml, program.parts, output);
